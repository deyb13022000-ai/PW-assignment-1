{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPtKAsvVqX3zZUfY+CodFyh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/deyb13022000-ai/PW-assignment-1/blob/main/Pw%20assignment%20Function%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Difference between a function and a method in Python\n",
        "\n",
        "Function: A block of reusable code that performs a task. Defined using def and called independently.\n",
        "\n",
        "Method: A function associated with an object (belongs to a class).\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "# Function\n",
        "def add(a, b):\n",
        "    return a + b\n",
        "    print(add(2, 3))  # Output: 5\n",
        "\n",
        "    # Method\n",
        "    text = \"hello\"\n",
        "    print(text.upper())  # Output: HELLO\n",
        "    "
      ],
      "metadata": {
        "id": "xJGHQH3t6dYL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Concept of function arguments and parameters\n",
        "\n",
        "Parameters: Variables defined in the function definition.\n",
        "\n",
        "Arguments: Values passed while calling the function.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "def greet(name):   # 'name' is a parameter\n",
        "    return f\"Hello, {name}\"\n",
        "\n",
        "    print(greet(\"Alice\"))  # \"Alice\" is an argument"
      ],
      "metadata": {
        "id": "XK5z2eFw6m6U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Different ways to define and call a function\n",
        "\n",
        "1. Normal function:\n",
        "\n",
        "\n",
        "\n",
        "def square(x):\n",
        "    return x * x\n",
        "    print(square(5))\n",
        "\n",
        "    2. Lambda function:\n",
        "\n",
        "\n",
        "\n",
        "    square = lambda x: x * x\n",
        "    print(square(5))\n",
        "\n",
        "    3. Built-in functions:\n",
        "\n",
        "\n",
        "\n",
        "    print(len(\"Python\"))\n",
        "    "
      ],
      "metadata": {
        "id": "vxsPp3zX69-4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Purpose of the return statement\n",
        "\n",
        "It sends back a value from a function to the caller.\n",
        "\n",
        "Without return, function outputs None.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "def add(a, b):\n",
        "    return a + b\n",
        "\n",
        "    print(add(3, 7))  # Output: 10"
      ],
      "metadata": {
        "id": "ZoCat38B7PlS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Iterators vs Iterables\n",
        "\n",
        "Iterable: An object that can return an iterator (list, tuple, string).\n",
        "\n",
        "Iterator: Object with __iter__() and __next__() methods, returns elements one at a time.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "my_list = [1, 2, 3]\n",
        "it = iter(my_list)   # Iterator created\n",
        "print(next(it))  # 1\n",
        "print(next(it))  # 2"
      ],
      "metadata": {
        "id": "tqfXaerc7WgC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Generators and their definition\n",
        "\n",
        "Generator: A function that yields values one by one using yield.\n",
        "\n",
        "Saves memory (lazy evaluation).\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "def my_gen():\n",
        "    for i in range(3):\n",
        "            yield i\n",
        "\n",
        "            for val in my_gen():\n",
        "                print(val)   # 0, 1, 2"
      ],
      "metadata": {
        "id": "HvF8JItn7fRg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Advantages of Generators over Functions\n",
        "\n",
        "Memory efficient (does not store all values in memory).\n",
        "\n",
        "Useful for large data or infinite streams.\n",
        "\n",
        "Iterates one item at a time.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "# Generator for large numbers\n",
        "def gen_nums(n):\n",
        "    for i in range(n):\n",
        "            yield i\n",
        "\n",
        "            nums = gen_nums(1000000)\n",
        "            print(next(nums))  # 0\n",
        "\n",
        "            "
      ],
      "metadata": {
        "id": "EgmHMq-476EH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Lambda function and its use\n",
        "\n",
        "Lambda = anonymous (nameless) function, defined using lambda keyword.\n",
        "\n",
        "Used for short, single-line operations.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "square = lambda x: x*x\n",
        "print(square(4))  # Output: 16"
      ],
      "metadata": {
        "id": "EP8aaWY87_MJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Purpose and usage of map()\n",
        "\n",
        "Applies a function to every element of an iterable.\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "nums = [1, 2, 3, 4]\n",
        "squares = list(map(lambda x: x*x, nums))\n",
        "print(squares)  # [1, 4, 9, 16]\n"
      ],
      "metadata": {
        "id": "cOuUepnM8FAv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Difference between map(), reduce(), and filter()\n",
        "\n",
        "map() → Applies a function to all elements.\n",
        "\n",
        "filter() → Filters elements based on condition.\n",
        "\n",
        "reduce() → Reduces sequence into a single value (needs functools.reduce).\n",
        "\n",
        "\n",
        "Example:\n",
        "\n",
        "from functools import reduce\n",
        "\n",
        "nums = [1, 2, 3, 4, 5]\n",
        "\n",
        "# map\n",
        "print(list(map(lambda x: x*2, nums)))   # [2,4,6,8,10]\n",
        "\n",
        "# filter\n",
        "print(list(filter(lambda x: x%2==0, nums)))  # [2,4]\n",
        "\n",
        "# reduce\n",
        "print(reduce(lambda a, b: a+b, nums))   # 15\n"
      ],
      "metadata": {
        "id": "u-nDf9d48J0g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. Reduce function for sum operation\n",
        "\n",
        "List = [47, 11, 42, 13]\n",
        "\n",
        "Step by step (reduce):\n",
        "\n",
        "Step 1: 47 + 11 = 58\n",
        "Step 2: 58 + 42 = 100\n",
        "Step 3: 100 + 13 = 113\n",
        "Final Result = 113\n",
        "\n",
        "Code:\n",
        "\n",
        "from functools import reduce\n",
        "\n",
        "nums = [47, 11, 42, 13]\n",
        "result = redureducece(lambda a, b: a+b, nums)\n",
        "print(result)  # 113"
      ],
      "metadata": {
        "id": "OVFOySKD-H6W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Sum of all even numbers in a list\n",
        "def sum_even_numbers(lst):\n",
        "    return sum(num for num in lst if num % 2 == 0)\n",
        "\n",
        "print(sum_even_numbers([1, 2, 3, 4, 5, 6]))  # Output: 12"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nzYYNQQG-T9M",
        "outputId": "2b189b5c-1fc1-42b9-a742-98717251b884"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reverse a string\n",
        "def reverse_string(s):\n",
        "    return s[::-1]\n",
        "\n",
        "print(reverse_string(\"Python\"))  # Output: nohtyP"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gltbjlwy-gh5",
        "outputId": "a4877d19-63a1-4677-d05b-6a206bd882c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nohtyP\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Return squares of a list of integers\n",
        "def square_list(lst):\n",
        "    return [x**2 for x in lst]\n",
        "\n",
        "print(square_list([1, 2, 3, 4]))  # Output: [1, 4, 9, 16]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bi1wvmrm-6k6",
        "outputId": "430224a6-ce17-4059-9d4e-218d97374861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if a number is prime (1 to 200)\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "print([n for n in range(1, 201) if is_prime(n)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ryyDbtkA_IyI",
        "outputId": "24abfc51-ac98-4b08-f0f5-11ca2e0b23dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fibonacci Iterator Class\n",
        "class Fibonacci:\n",
        "    def __init__(self, n):\n",
        "        self.n = n\n",
        "        self.a, self.b = 0, 1\n",
        "        self.count = 0\n",
        "\n",
        "    def __iter__(self):\n",
        "        return self\n",
        "\n",
        "    def __next__(self):\n",
        "        if self.count >= self.n:\n",
        "            raise StopIteration\n",
        "        result = self.a\n",
        "        self.a, self.b = self.b, self.a + self.b\n",
        "        self.count += 1\n",
        "        return result\n",
        "\n",
        "fib = Fibonacci(10)\n",
        "print(list(fib))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IolmaBoq_WwX",
        "outputId": "3f3d64ad-d3ba-4ead-c205-ec575a8a3d29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Generator function (powers of 2)\n",
        "def powers_of_two(n):\n",
        "    for i in range(n+1):\n",
        "            yield 2 ** i\n",
        "\n",
        "print(list(powers_of_two(5)))  # Output: [1, 2, 4, 8, 16, 32]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6MpZLXn_jqO",
        "outputId": "aeb46758-e9bb-4b43-a36c-0ff40bb25301"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 4, 8, 16, 32]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Generator that reads file line by line\n",
        "def read_file(filename):\n",
        "    with open(filename, \"r\") as file:\n",
        "            for line in file:\n",
        "                        yield line.strip()\n",
        "\n",
        "                        # Example:\n",
        "                        # for line in read_file(\"test.txt\"):\n",
        "                        #     print(line)"
      ],
      "metadata": {
        "id": "VjRSKE1A_yAw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort list of tuples using lambda (by 2nd element)\n",
        "data = [(1, 3), (4, 1), (2, 2)]\n",
        "sorted_data = sorted(data, key=lambda x: x[1])\n",
        "print(sorted_data)  # Output: [(4, 1), (2, 2), (1, 3)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8GM7F5QKANWo",
        "outputId": "8714520b-5d33-4b82-f91c-4d786f54077b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(4, 1), (2, 2), (1, 3)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Celsius to Fahrenheit using map\n",
        "celsius = [0, 20, 37, 100]\n",
        "fahrenheit = list(map(lambda c: (c * 9/5) + 32, celsius))\n",
        "print(fahrenheit)  # Output: [32.0, 68.0, 98.6, 212.0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VclnzpcSAfVI",
        "outputId": "90929ff3-421d-479a-be56-37c3128b0d98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[32.0, 68.0, 98.6, 212.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove vowels using filter\n",
        "def remove_vowels(s):\n",
        "    vowels = \"aeiouAEIOU\"\n",
        "    return \"\".join(filter(lambda ch: ch not in vowels, s))\n",
        "\n",
        "print(remove_vowels(\"Hello World\"))  # Output: Hll Wrld"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEkjJ3ReArH8",
        "outputId": "7d28c2ff-2ff6-4e5f-866a-5d9a7b4bfff5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hll Wrld\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove vowels using filter\n",
        "def remove_vowels(s):\n",
        "    vowels = \"aeiouAEIOU\"\n",
        "    return \"\".join(filter(lambda ch: ch not in vowels, s))\n",
        "\n",
        "print(remove_vowels(\"Hello World\"))  # Output: Hll Wrld"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0OFJ7PVzA5gt",
        "outputId": "f756da8c-dd3e-4b80-8645-16dfd9fdde00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hll Wrld\n"
          ]
        }
      ]
    }
  ]
}